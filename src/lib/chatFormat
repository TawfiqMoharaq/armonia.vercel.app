// src/lib/chatFormat.ts
import type { ReactNode } from "react";

// ====== Helpers ======
export const stripBoldMarkers = (text: string) =>
  text.replace(/\*\*(.+?)\*\*/g, "$1").trim();

export const toYoutubeSearchLink = (keywords?: string) => {
  const base = (keywords?.trim() && keywords.trim()) || "family sensory routine tips";
  return `https://www.youtube.com/results?search_query=${encodeURIComponent(base)}`;
};

export const normalizeYoutubeLink = (url: string, fallbackKeywords?: string) => {
  const lower = url.toLowerCase();
  const isYoutube = lower.includes("youtube.com") || lower.includes("youtu.be");
  if (!isYoutube) return url;
  if (
    lower.includes("example") ||
    lower.endsWith("watch?v=") ||
    lower.includes("watch?v=example") ||
    lower.endsWith("results?search_query=")
  ) {
    return toYoutubeSearchLink(fallbackKeywords);
  }
  return url;
};

// ===== Inline formatter =====
export const renderInline = (text: string, fallbackKeywords?: string): ReactNode[] => {
  const nodes: ReactNode[] = [];
  let remaining = text;

  const pushPlain = (segment: string) => {
    if (!segment) return;
    const urlRegex = /(https?:\/\/[^\s)]+)/g;
    let lastIndex = 0;

    segment.replace(urlRegex, (url, _m, offset) => {
      if (offset > lastIndex) nodes.push(segment.slice(lastIndex, offset));
      const normalized = normalizeYoutubeLink(url, fallbackKeywords);
      nodes.push(
        <a
          key={`url-${nodes.length}`}
          href={normalized}
          target="_blank"
          rel="noopener noreferrer"
          className="text-[#0A6D8B] underline decoration-dotted underline-offset-4"
        >
          رابط يوتيوب مناسب
        </a>
      );
      lastIndex = offset + url.length;
      return "";
    });

    if (lastIndex < segment.length) nodes.push(segment.slice(lastIndex));
  };

  while (remaining.length) {
    const urlMatch = /(https?:\/\/[^\s)]+)/.exec(remaining);
    if (!urlMatch) {
      pushPlain(remaining);
      break;
    }
    if (urlMatch.index > 0) {
      pushPlain(remaining.slice(0, urlMatch.index));
    }
    const url = urlMatch[1];
    const normalized = normalizeYoutubeLink(url, fallbackKeywords);
    nodes.push(
      <a
        key={`raw-${nodes.length}`}
        href={normalized}
        target="_blank"
        rel="noopener noreferrer"
        className="text-[#0A6D8B] underline decoration-dotted underline-offset-4"
      >
        رابط يوتيوب مناسب
      </a>
    );
    remaining = remaining.slice(urlMatch.index + url.length);
  }

  return nodes;
};

// ===== Parser =====

export type ParsedSection = { title: string; paras: string[]; items: string[] };

const bulletRegex = /^([•\-–—]|\d+[.)\-،]|[\u0660-\u0669]+[.)\-،])\s*/;

const isHeading = (s: string) => {
  const clean = stripBoldMarkers(s.replace(/^#+\s*/, "")).replace(/[.:：]+$/, "").trim();
  return (
    /^صباح/.test(clean) || /^مساء/.test(clean) || /^تهدئة/.test(clean) ||
    /^في المواقف/.test(clean) || /^المواقف/.test(clean) ||
    /^إذا/.test(clean) || /^نصائح/.test(clean) || /^روابط/.test(clean) ||
    /^(Power\s*Up|Cooldown|Routine)/i.test(clean)
  );
};

export const normalizeTitle = (s: string) => {
  const t = stripBoldMarkers(s.replace(/^#+\s*/, "")).replace(/[.:：]+$/, "").trim();
  if (/Power\s*Up/i.test(t)) return "صباحًا (Power Up)";
  if (/Cooldown/i.test(t) || /^تهدئة/.test(t) || /^مساء/.test(t)) return "مساءً (تهدئة)";
  if (/^المواقف/.test(t) || /^في المواقف/.test(t)) return "في المواقف الصعبة";
  return t;
};

// ✅ كل عنوان لون مختلف حسب نوعه
export const iconAndClass = (title: string) => {
  if (/^صباح/.test(title)) return { cls: "text-[#00A6A6]" }; // تركواز
  if (/^مساء/.test(title) || /^تهدئة/.test(title)) return { cls: "text-[#7E60BF]" }; // بنفسجي هادئ
  if (/^في المواقف/.test(title) || /^إذا/.test(title)) return { cls: "text-[#E07A3F]" }; // برتقالي
  return { cls: "text-[#0A6D8B]" }; // لون Armonia الأساسي
};

export function parseReply(text: string): ParsedSection[] {
  const lines = text.split(/\n+/).map((l) => l.trim()).filter(Boolean);
  const sections: ParsedSection[] = [];
  let current: ParsedSection | null = null;

  const push = () => { if (current) sections.push(current); current = null; };

  lines.forEach((line) => {
    if (isHeading(line)) {
      push();
      current = { title: normalizeTitle(line), paras: [], items: [] };
      return;
    }

    if (bulletRegex.test(line)) {
      current ??= { title: "توصيات", paras: [], items: [] };
      current.items.push(stripBoldMarkers(line.replace(bulletRegex, "")));
      return;
    }

    current ??= { title: "توصيات", paras: [], items: [] };
    current.paras.push(stripBoldMarkers(line));
  });

  push();
  return sections.length ? sections : [{ title: "توصيات", paras: lines, items: [] }];
}
