@@ -1,7 +1,18 @@
// src/lib/chatFormat.ts
import type { ReactNode } from "react";

// ====== Helpers ======
/* -------------------- إزالة الإيموجي والرموز الزخرفية -------------------- */
// نطاقات الإيموجي + رموز شائعة و VARIATION SELECTOR/ZWJ
const EMOJI_REGEX =
  /[\u{1F300}-\u{1FAFF}\u{1F1E6}-\u{1F1FF}\u2600-\u27BF\u200D\uFE0F]/gu;
// رموز بداية سطر مزعجة (أسهم/نجوم/أيقونات نصية)
const LEADING_SYMBOLS = /^[\s\p{P}\p{S}·•●▪▫◦→⇒▶►★☆✓✔✦✧✱❖❊❋◇◆⬤⦿⭑⭒⚝✨🌟➡️⏩⏭️👉👈⬅️➡️⬆️⬇️]+/u;

const stripEmojis = (s: string) => s.replace(EMOJI_REGEX, "");
const stripLeadingSymbols = (s: string) => s.replace(LEADING_SYMBOLS, "").trim();
const scrub = (s: string) => stripLeadingSymbols(stripEmojis(s));

/* --------------------------- أدوات مساعدة سابقة -------------------------- */
export const stripBoldMarkers = (text: string) =>
  text.replace(/\*\*(.+?)\*\*/g, "$1").trim();

@@ -25,7 +36,7 @@ export const normalizeYoutubeLink = (url: string, fallbackKeywords?: string) =>
  return url;
};

// ===== Inline formatter =====
/* ------------------------- تنسيق داخل السطر (روابط) ------------------------ */
export const renderInline = (text: string, fallbackKeywords?: string): ReactNode[] => {
  const nodes: ReactNode[] = [];
  let remaining = text;
@@ -34,7 +45,6 @@ export const renderInline = (text: string, fallbackKeywords?: string): ReactNode
    if (!segment) return;
    const urlRegex = /(https?:\/\/[^\s)]+)/g;
    let lastIndex = 0;

    segment.replace(urlRegex, (url, _m, offset) => {
      if (offset > lastIndex) nodes.push(segment.slice(lastIndex, offset));
      const normalized = normalizeYoutubeLink(url, fallbackKeywords);
@@ -52,7 +62,6 @@ export const renderInline = (text: string, fallbackKeywords?: string): ReactNode
      lastIndex = offset + url.length;
      return "";
    });

    if (lastIndex < segment.length) nodes.push(segment.slice(lastIndex));
  };

@@ -62,9 +71,7 @@ export const renderInline = (text: string, fallbackKeywords?: string): ReactNode
      pushPlain(remaining);
      break;
    }
    if (urlMatch.index > 0) {
      pushPlain(remaining.slice(0, urlMatch.index));
    }
    if (urlMatch.index > 0) pushPlain(remaining.slice(0, urlMatch.index));
    const url = urlMatch[1];
    const normalized = normalizeYoutubeLink(url, fallbackKeywords);
    nodes.push(
@@ -84,14 +91,14 @@ export const renderInline = (text: string, fallbackKeywords?: string): ReactNode
  return nodes;
};

// ===== Parser =====

/* ------------------------------- Parser مرن ------------------------------- */
export type ParsedSection = { title: string; paras: string[]; items: string[] };

const bulletRegex = /^([•\-–—]|\d+[.)\-،]|[\u0660-\u0669]+[.)\-،])\s*/;

const isHeading = (s: string) => {
  const clean = stripBoldMarkers(s.replace(/^#+\s*/, "")).replace(/[.:：]+$/, "").trim();
  const noEmoji = scrub(s);
  const clean = stripBoldMarkers(noEmoji.replace(/^#+\s*/, "")).replace(/[.:：]+$/, "").trim();
  return (
    /^صباح/.test(clean) || /^مساء/.test(clean) || /^تهدئة/.test(clean) ||
    /^في المواقف/.test(clean) || /^المواقف/.test(clean) ||
@@ -101,26 +108,30 @@ const isHeading = (s: string) => {
};

export const normalizeTitle = (s: string) => {
  const t = stripBoldMarkers(s.replace(/^#+\s*/, "")).replace(/[.:：]+$/, "").trim();
  if (/Power\s*Up/i.test(t)) return "صباحًا (Power Up)";
  const t = stripBoldMarkers(scrub(s).replace(/^#+\s*/, "")).replace(/[.:：]+$/, "").trim();
  if (/Power\s*Up/i.test(t) || /^صباح/.test(t)) return "صباحًا (Power Up)";
  if (/Cooldown/i.test(t) || /^تهدئة/.test(t) || /^مساء/.test(t)) return "مساءً (تهدئة)";
  if (/^المواقف/.test(t) || /^في المواقف/.test(t)) return "في المواقف الصعبة";
  if (/^المواقف/.test(t) || /^في المواقف/.test(t) || /^إذا/.test(t)) return "في المواقف الصعبة";
  return t;
};

// ✅ كل عنوان لون مختلف حسب نوعه
/* --------- ألوان العناوين (بدون أيقونات – فقط ألوان مختلفة) ---------- */
export const iconAndClass = (title: string) => {
  if (/^صباح/.test(title)) return { cls: "text-[#00A6A6]" }; // تركواز
  if (/^صباح/.test(title)) return { cls: "text-[#00A6A6]" };     // تركواز صباحي
  if (/^مساء/.test(title) || /^تهدئة/.test(title)) return { cls: "text-[#7E60BF]" }; // بنفسجي هادئ
  if (/^في المواقف/.test(title) || /^إذا/.test(title)) return { cls: "text-[#E07A3F]" }; // برتقالي
  return { cls: "text-[#0A6D8B]" }; // لون Armonia الأساسي
  return { cls: "text-[#0A6D8B]" }; // اللون الأساسي
};

export function parseReply(text: string): ParsedSection[] {
  const lines = text.split(/\n+/).map((l) => l.trim()).filter(Boolean);
  // نظّف الأسطر من الإيموجي والرموز قبل أي معالجة
  const lines = text
    .split(/\n+/)
    .map((l) => scrub(l.trim()))
    .filter(Boolean);

  const sections: ParsedSection[] = [];
  let current: ParsedSection | null = null;

  const push = () => { if (current) sections.push(current); current = null; };

  lines.forEach((line) => {
@@ -129,15 +140,13 @@ export function parseReply(text: string): ParsedSection[] {
      current = { title: normalizeTitle(line), paras: [], items: [] };
      return;
    }

    if (bulletRegex.test(line)) {
      current ??= { title: "توصيات", paras: [], items: [] };
      current.items.push(stripBoldMarkers(line.replace(bulletRegex, "")));
      current.items.push(stripBoldMarkers(scrub(line.replace(bulletRegex, ""))));
      return;
    }

    current ??= { title: "توصيات", paras: [], items: [] };
    current.paras.push(stripBoldMarkers(line));
    current.paras.push(stripBoldMarkers(scrub(line)));
  });

  push();
